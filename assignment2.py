# -*- coding: utf-8 -*-
"""assignment2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vuzp1fiac9hHmE4LRvIV0j86cFBe_gVk
"""

from PIL import Image

def rgb_to_grayscale(image):
    grayscale_image = Image.new("L", image.size)  # "L" mode stands for grayscale

    for x in range(image.width):
        for y in range(image.height):
            r, g, b = image.getpixel((x, y))
            # Convert RGB to grayscale using luminosity method
            grayscale_value = int(0.21 * r + 0.72 * g + 0.07 * b)
            grayscale_image.putpixel((x, y), grayscale_value)

    return grayscale_image

# Load the RGB image
input_image_path = "a3.jpg"
rgb_image = Image.open(input_image_path)

# Convert RGB image to grayscale
grayscale_image = rgb_to_grayscale(rgb_image)

# Save the grayscale image
grayscale_image.save("grayscale_a3.jpg")

def grayscale_histogram(image):
    histogram = [0] * 256  # Initialize histogram with 256 bins for 8-bit grayscale images

    # Iterate through each pixel to calculate histogram
    for x in range(image.width):
        for y in range(image.height):
            pixel_value = image.getpixel((x, y))
            histogram[pixel_value] += 1

    return histogram

# Compute histogram for the grayscale image
grayscale_hist = grayscale_histogram(grayscale_image)
print("Grayscale Histogram:", grayscale_hist)

def rgb_histogram(image):
    histograms = [[0] * 256, [0] * 256, [0] * 256]  # Initialize histograms for each channel

    # Iterate through each pixel to calculate histograms
    for x in range(image.width):
        for y in range(image.height):
            r, g, b = image.getpixel((x, y))
            histograms[0][r] += 1  # Red channel
            histograms[1][g] += 1  # Green channel
            histograms[2][b] += 1  # Blue channel

    return histograms

# Compute histograms for each channel of the RGB image
rgb_hist = rgb_histogram(rgb_image)
print("Red Histogram:", rgb_hist[0])
print("Green Histogram:", rgb_hist[1])
print("Blue Histogram:", rgb_hist[2])

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

# (a) Convert RGB image to grayscale
def rgb_to_grayscale(image):
    grayscale_image = Image.new("L", image.size)  # Create a new grayscale image

    width, height = image.size

    for y in range(height):
        for x in range(width):
            r, g, b = image.getpixel((x, y))
            # Convert RGB to grayscale using luminosity method
            grayscale_value = int(0.21 * r + 0.72 * g + 0.07 * b)
            grayscale_image.putpixel((x, y), grayscale_value)

    return grayscale_image

# (b) Calculate histogram for grayscale image
def grayscale_histogram(image):
    histogram = [0] * 256  # Initialize histogram with 256 bins for 8-bit grayscale images

    width, height = image.size

    for y in range(height):
        for x in range(width):
            pixel_value = image.getpixel((x, y))
            histogram[pixel_value] += 1

    return histogram

# (c) Calculate histograms for each channel of RGB image
def rgb_histogram(image):
    histograms = [[0] * 256, [0] * 256, [0] * 256]  # Initialize histograms for each channel

    width, height = image.size

    for y in range(height):
        for x in range(width):
            r, g, b = image.getpixel((x, y))
            histograms[0][r] += 1  # Red channel
            histograms[1][g] += 1  # Green channel
            histograms[2][b] += 1  # Blue channel

    return histograms

# Load the RGB image
input_image_path = "a3.jpg"
rgb_image = Image.open(input_image_path)

# (a) Convert RGB image to grayscale
grayscale_image = rgb_to_grayscale(rgb_image)

# Save grayscale image
grayscale_image.save("grayscale_a3.jpg")

# (b) Calculate histogram for grayscale image
grayscale_hist = grayscale_histogram(grayscale_image)

# Plot grayscale histogram
plt.figure(figsize=(8, 6))
plt.bar(range(256), grayscale_hist, color='gray', alpha=0.7)
plt.title('Grayscale Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')
plt.savefig('grayscale_histogram_a3.jpg')
plt.close()

# (c) Calculate histograms for each channel of RGB image
rgb_hist = rgb_histogram(rgb_image)

# Plot histograms for each channel
channels = ['Red', 'Green', 'Blue']
colors = ['red', 'green', 'blue']

for i in range(3):
    plt.figure(figsize=(8, 6))
    plt.bar(range(256), rgb_hist[i], color=colors[i], alpha=0.7)
    plt.title(f'{channels[i]} Channel Histogram')
    plt.xlabel('Pixel Value')
    plt.ylabel('Frequency')
    plt.savefig(f'{channels[i].lower()}_channel_histogram_a3.jpg')
    plt.close()

# Plot the representation of the histogram of a color image
plt.figure(figsize=(8, 6))
for i, color in enumerate(colors):
    plt.plot(range(256), rgb_hist[i], color=color, label=channels[i])
plt.title('Color Image Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')
plt.legend()
plt.savefig('color_image_histogram_a3.jpg')
plt.close()

# Display messages
print("Conversion to grayscale and histograms calculated and saved successfully.")