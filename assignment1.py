# -*- coding: utf-8 -*-
"""assignment1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WSoDBZrvgXFuCbKlax3yrSRO29hPciJc
"""

from PIL import Image

def load_image(file_path):
    """
    Load an image from the specified file path using Pillow.
    """
    return Image.open(file_path)

def save_image(image, file_path):
    """
    Save the image to the specified file path using Pillow.
    """
    image.save(file_path)

def downscale_image(image):
    """
    Downscale the image by a factor of 3 without using the resize method.
    """
    width, height = image.size
    new_width = width // 3
    new_height = height // 3
    new_image = Image.new("RGB", (new_width, new_height))

    for y in range(0, new_height):
        for x in range(0, new_width):
            r, g, b = get_average_pixel(image, x * 3, y * 3)
            new_image.putpixel((x, y), (int(r), int(g), int(b)))

    return new_image

def get_average_pixel(image, start_x, start_y):
    """
    Calculate the average RGB value of a 3x3 pixel area starting from (start_x, start_y).
    """
    r_total = g_total = b_total = 0
    count = 0

    for y in range(start_y, start_y + 3):
        for x in range(start_x, start_x + 3):
            r, g, b = image.getpixel((x, y))
            r_total += r
            g_total += g
            b_total += b
            count += 1

    return r_total / count, g_total / count, b_total / count

from google.colab import drive
drive.mount('/content/drive')

!ls

# Load the image
input_image_path = "aef-CSN-III-3-1_088-600x900.jpg"
output_image_path = "aef-CSN-III-3-1_088-600x900_processed.jpg"

original_image = load_image(input_image_path)

# Downscale the image
downscaled_image = downscale_image(original_image)

# Save the downscaled image
save_image(downscaled_image, output_image_path)

print("Image down-scaled and saved successfully.")